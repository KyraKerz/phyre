import random
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, LeakyReLU, MaxPooling2D
import numpy as np
from keras_video import VideoFrameGenerator

random.seed(0)

images = np.load('Images.npy', allow_pickle=True)
evaluation = np.load('Evaluation.npy', allow_pickle=True)
evaluation = evaluation.reshape(994, 1)

#print(evaluation)

#print(imgo[8][0])
print(images)
classes = [-1, 1]
images = images.reshape(994 * 17, 256, 256, 1)
imagesnew = images[0::17]

length = 900
end = 994
evaluation = evaluation.reshape(994,)
print( evaluation.shape)
images_train = imagesnew[0:length]
evaluation_train = evaluation[0:length]

images_validation = imagesnew[length:end]
evaluation_validation = images[length:end]


model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',input_shape=(256,256,1),padding='same'))
model.add(LeakyReLU(alpha=0.1))
model.add(MaxPooling2D((2, 2),padding='same'))
model.add(Conv2D(64, (3, 3), activation='linear',padding='same'))
model.add(LeakyReLU(alpha=0.1))
model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(Conv2D(128, (3, 3), activation='linear',padding='same'))
model.add(LeakyReLU(alpha=0.1))
model.add(MaxPooling2D(pool_size=(2, 2),padding='same'))
model.add(Flatten())
model.add(Dense(128, activation='linear'))
model.add(LeakyReLU(alpha=0.1))
model.add(Dense(2, activation='softmax'))


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()
model.fit(images_train/255.0, evaluation_train, batch_size=1,epochs=50,verbose=1,validation_data=(images_validation, evaluation_validation))





























































































































































































































































































































































































































































